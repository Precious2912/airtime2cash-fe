import AuthContext from "./authContext";
import React, { useReducer, useState } from "react";
import AuthReducer from "./AuthReducer";
import { apiPatch, apiPost } from "../../utils/api/axios";
import { LOGOUT } from "../types";
import { toast } from "react-toastify";

const AuthState = (props) => {
  const [modal, setModal] = useState(false);
  const initialState = {
    token: localStorage.getItem("token"),
    user: JSON.parse(localStorage.getItem("user")),
    isAuthenticated: null,
  };
  const [state, dispatch] = useReducer(AuthReducer, initialState);

  const register = async (formData) => {
    try {
      const registerData = {
        firstName: formData.firstName,
        lastName: formData.lastName,
        username: formData.username,
        email: formData.email,
        phoneNumber: formData.phoneNumber,
        password: formData.password,
        confirmPassword: formData.confirmPassword,
      };

      await apiPost("/users/register", registerData)
        .then((res) => {
          toast.success(res.data.message);
          setTimeout(() => {
            window.location.href = "/user/email-sent";
          }, 2000);
          clearTimeout();
        })
        .catch((err) => {
          toast.error(err.response.data.error);
        });
    } catch (error) {
      toast.error(error.response.data.error);
    }
  };

  const login = async (formData) => {
    try {
      const loginData = {
        userInfo: formData.userInfo,
        password: formData.password,
      };
      await apiPost("/users/login", loginData)
        .then((res) => {
          console.log(res);
          toast.success(res.data.message);
          localStorage.setItem("token", res.data.token);
          localStorage.setItem(
            "user",
            JSON.stringify({
              email: res.data.User.email,
              id: res.data.User.id,
              firstName: res.data.User.firstName,
              lastName: res.data.User.lastName,
              phoneNumber: res.data.User.phoneNumber,
              username: res.data.User.username,
              avatar: res.data.User.avatar,
            })
          );
          setTimeout(() => {
            window.location.href = "/user/dashboard";
          }, 2000);
          clearTimeout();
        })
        .catch((err) => {
          toast.error(err.response.data.error);
        });
    } catch (error) {
      toast.error(error.response.data.error);
    }
  };
  const logout = () => {
    dispatch({
      type: LOGOUT,
      payload: true,
    });
  };

  const forgotPassword = async (
    location,
    formData = JSON.parse(localStorage.getItem("email"))
  ) => {
    try {
      const form = {
        email: formData.email,
      };
      await apiPost("/users/forgotpassword", form)
        .then((res) => {
          console.log(location.pathname);
          toast.success(res.data.message);
          localStorage.setItem("email", JSON.stringify(formData));
          if (location.pathname !== "/user/email-sent") {
            setTimeout(() => {
              window.location.href = "/user/email-sent";
            }, 2000);
            clearTimeout();
          }
        })
        .catch((err) => {
          toast.error(err.response.data.error);
          console.log(err);
        });
    } catch (error) {
      console.log(error);
    }
  };

  const resetPassword = async (formData, id) => {
    try {
      const form = {
        password: formData.password,
        confirmPassword: formData.confirmPassword,
      };
      await apiPatch(`/users/change-password/${id}`, form)
        .then((res) => {
          toast.success(res.data.message);
          setTimeout(() => {
            window.location.href = "/user/login";
          }, 2000);
          clearTimeout();
        })
        .catch((err) => {
          toast.error(err.response.data.error);
          console.log(err);
        });
    } catch (error) {
      console.log(error);
    }
  };


  const updateUserInfo = async (formData) => {
    try {
      await apiPatch(`/users/update/${formData.id}`, formData)
        .then((res) => {
          toast.success(res.data.message);
          localStorage.setItem("user", JSON.stringify(formData));
          setTimeout(() => {
            window.location.href = "/user/dashboard";
          }, 2000);
          clearTimeout();
        })
        .catch((err) => {
          toast.error(err.response.data.error);
        });
    } catch (error) {
      console.log(error);
    }
  };
  const updateUserAvatar = async (avatar, user) => {
    console.log(avatar);
    try {
      const form = {
        avatar,
        email: user.email,
        firstName: user.firstName,
        lastName: user.lastName,
        phoneNumber: user.phoneNumber,
        username: user.username,
        id: user.id,
      };
      await apiPatch(`/users/update/${user.id}`, form)
        .then((res) => {
          toast.success(res.data.message);
          localStorage.setItem("user", JSON.stringify(form));
          setTimeout(() => {
            window.location.href = "/user/dashboard/update-user";
          }, 2000);
          clearTimeout();
        })
        .catch((err) => {
          console.log(err);
          toast.error(err.response.data.error);
        });
    } catch (error) {
      console.log(error);
    }
  };

  return (
    <AuthContext.Provider
      value={{
        register,
        login,
        logout,
        forgotPassword,
        resetPassword,
        updateUserInfo,
        updateUserAvatar,
        isAuthenticated: state.isAuthenticated,
        user: state.user,
        state,
        token: localStorage.getItem("token"),
        modal,
        setModal,
      }}
    >
      {props.children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = React.useContext(AuthContext);
  if (context === "undefined") {
    throw new Error("useAuth must be used  within the auth provider");
  }
  return context;
};
export default AuthState;



import React, { useEffect, useRef } from "react";
import NavBar from "../../components/navbar/NavBar";
import {
  BackDiv,
  Container,
  ModalStyle,
  UpdateUserPageStyle,
} from "./UpdateUserStyles";
import logo from "../../assets/updateLogo.svg";
import { useState } from "react";
import { FaTimes } from "react-icons/fa";
import { useAuth } from "../../context/auth/authState";
const UpdateUser = () => {
  const { user, updateUserInfo, updateUserAvatar, modal, setModal } = useAuth();
  const [userInfo, setUserInfo] = useState(user);
  const wrapperRef = useRef(null);
  function useOutsideAlerter(ref) {
    useEffect(() => {
      /**
       * Alert if clicked on outside of element
       */
      function handleClickOutside(event) {
        if (ref.current && !ref.current.contains(event.target)) {
          setModal(false);
        }
      }
      // Bind the event listener
      document.addEventListener("mousedown", handleClickOutside);
      return () => {
        // Unbind the event listener on clean up
        document.removeEventListener("mousedown", handleClickOutside);
      };
    }, [ref]);
  }
  useOutsideAlerter(wrapperRef);
  
  const handleChange = (e) => {
    const { name, value } = e.target;
    setUserInfo({ ...userInfo, [name]: value });
  };
  const handleSubmit = (e) => {
    e.preventDefault();
    updateUserInfo(userInfo);
  };
  const handleAvatarChange = (e) => {
    const data = new FormData();
    data.append("file", e.target.files[0]);
  };


  const handleUpload = async (e) => {
    e.preventDefault();
    const file = e.target[0].files[0];
    const url =
      "https://api.cloudinary.com/v1_1/airtime-to-cash-podg/image/upload";
    const formData = new FormData();
    formData.append("file", file);
    formData.append("upload_preset", "buoutynp");
    await fetch(url, {
      method: "POST",
      body: formData,
    })
      .then((response) => {
        return response.json();
      })
      .then((data) => {
        if (data.secure_url !== "") {
          return data.secure_url;
        }
      })
      .then((res) => {
        updateUserAvatar(res, user);
        setModal(false);
      })
      .catch((err) => console.error(err));
  };



  return (
    <UpdateUserPageStyle>
      <NavBar dashboard />
      <BackDiv />
      <Container>
        <div className="container">
          <img src={logo} alt="logo" className="logo" />
          <h2 className="header-text">Basic Information</h2>
          <form action="" className="form-group" onSubmit={handleSubmit}>
            <div className="input-element">
              <label htmlFor="">First Name</label>
              <input
                type="text"
                name="firstName"
                placeholder="First Name"
                value={userInfo.firstName}
                onChange={handleChange}
              />
            </div>
            <div className="input-element">
              <label htmlFor="">Last Name</label>
              <input
                type="text"
                placeholder="Last Name"
                name="lastName"
                value={userInfo.lastName}
                onChange={handleChange}
              />
            </div>
            <div className="input-element">
              <label htmlFor="">Username</label>
              <input
                type="text"
                name="username"
                placeholder="Username"
                value={userInfo.username}
                onChange={handleChange}
              />
            </div>
            <div className="input-element">
              <label htmlFor="">Phone Number</label>
              <input
                type="text"
                name="phoneNumber"
                placeholder="Phone Number"
                value={userInfo.phoneNumber}
                onChange={handleChange}
              />
            </div>
            <div className="input-element">
              <label htmlFor="">Avatar</label>
              <input
                type="button"
                placeholder="Email"
                value={"Upload Photo"}
                className="avatar-upload"
                onClick={() => {
                  setModal(true);
                }}
              />
            </div>
            <button type="submit" className="save-btn">
              Save
            </button>
          </form>
        </div>
        {modal && (
          <ModalStyle>
            <div className="modal-content" ref={wrapperRef}>
              <div
                className="close-btn"
                onClick={() => {
                  setModal(false);
                }}
              >
                <FaTimes />
              </div>
              <img src={logo} alt="logo" className="modal-logo" />
              <img src={user.avatar} alt="" className="user-avatar" />
              <div className="upload-section">
                <h3>Upload a Photo</h3>
                <form
                  onSubmit={handleUpload}
                  name="file_upload[]"
                  className="modal-form"
                >
                  <input
                    type="file"
                    name=""
                    id=""
                    className="modal-input"
                    onChange={handleAvatarChange}
                  />
                  <p className="allowed-text">
                    *Allowed formats: jpeg, jpg, png and svg*{" "}
                  </p>
                  <button type="submit" className="save-btn-modal">
                    Add Photo
                  </button>
                </form>
              </div>
            </div>
          </ModalStyle>
        )}
      </Container>
    </UpdateUserPageStyle>
  );
};
export default UpdateUser;
// FaTimes